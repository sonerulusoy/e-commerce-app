generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  orders         Order[]
  reviews        Review[]
  contactMessages ContactMessage[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(USER)
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  author      String
  description String
  category    String
  language    String
  image       String // Tek bir resim URL'si
  price       Float
  inStock     Boolean
  stock       Int
  reviews     Review[]
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  rating      Int
  comment     String
  createdDate DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime          @default(now())
  paymentIntentId String            @unique
  products        CartProductType[]
  address         Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


type CartProductType {
  id          String
  name        String
  description String
  category    String
  quantity    Int
  price       Float
  image      String
  stock       Int
}

type Address {
  line1      String
  line2      String
  city       String
  state      String
  postalCode String
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ContactMessage {
  id        String    @id @default(cuid()) @map("_id") // @map("_id") eklendi
  userId    String?   @db.ObjectId
  name      String?
  email     String?
  message   String
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id])
}
